// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/client_gate.proto

#include "proto/client_gate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace proto {
class SessionSeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionSeed>
      _instance;
} _SessionSeed_default_instance_;
class EncryptKeyStrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncryptKeyStr>
      _instance;
} _EncryptKeyStr_default_instance_;
class EncryptKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncryptKey>
      _instance;
} _EncryptKey_default_instance_;
}  // namespace proto
namespace protobuf_proto_2fclient_5fgate_2eproto {
static void InitDefaultsSessionSeed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_SessionSeed_default_instance_;
    new (ptr) ::proto::SessionSeed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::SessionSeed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SessionSeed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSessionSeed}, {}};

static void InitDefaultsEncryptKeyStr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_EncryptKeyStr_default_instance_;
    new (ptr) ::proto::EncryptKeyStr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::EncryptKeyStr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncryptKeyStr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncryptKeyStr}, {}};

static void InitDefaultsEncryptKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_EncryptKey_default_instance_;
    new (ptr) ::proto::EncryptKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::EncryptKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncryptKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncryptKey}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SessionSeed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EncryptKeyStr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EncryptKey.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::SessionSeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::SessionSeed, seed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::EncryptKeyStr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::EncryptKeyStr, encrypt_key_str_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::EncryptKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::EncryptKey, random_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::EncryptKey, encrypt_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::EncryptKey, seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::EncryptKey, random_tail_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::SessionSeed)},
  { 6, -1, sizeof(::proto::EncryptKeyStr)},
  { 12, -1, sizeof(::proto::EncryptKey)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_SessionSeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_EncryptKeyStr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_EncryptKey_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/client_gate.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027proto/client_gate.proto\022\005proto\032\022proto/"
      "common.proto\"\033\n\013SessionSeed\022\014\n\004seed\030\001 \001("
      "\004\"(\n\rEncryptKeyStr\022\027\n\017encrypt_key_str\030\001 "
      "\001(\014\"[\n\nEncryptKey\022\025\n\rrandom_header\030\001 \001(\014"
      "\022\023\n\013encrypt_key\030\002 \001(\014\022\014\n\004seed\030\003 \001(\004\022\023\n\013r"
      "andom_tail\030\004 \001(\0142\330\001\n\014IGateService\022-\n\021ses"
      "ionSeedRequest\022\013.proto.None\032\013.proto.None"
      "\0226\n\021encryptKeyRequest\022\024.proto.EncryptKey"
      "Str\032\013.proto.None\0220\n\014loginRequest\022\023.proto"
      ".LoginRequest\032\013.proto.None\022/\n\rcallEntity"
      "Rpc\022\021.proto.RpcMessage\032\013.proto.None2\312\001\n\016"
      "IClientService\022,\n\020sessionSeedReply\022\013.pro"
      "to.None\032\013.proto.None\022+\n\017encryptKeyReply\022"
      "\013.proto.None\032\013.proto.None\022,\n\nloginReply\022"
      "\021.proto.LoginReply\032\013.proto.None\022/\n\rcallE"
      "ntityRpc\022\021.proto.RpcMessage\032\013.proto.None"
      "B\006\200\001\001\220\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 656);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/client_gate.proto", &protobuf_RegisterTypes);
  ::protobuf_proto_2fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fclient_5fgate_2eproto
namespace proto {

// ===================================================================

void SessionSeed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionSeed::kSeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionSeed::SessionSeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fclient_5fgate_2eproto::scc_info_SessionSeed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SessionSeed)
}
SessionSeed::SessionSeed(const SessionSeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seed_ = from.seed_;
  // @@protoc_insertion_point(copy_constructor:proto.SessionSeed)
}

void SessionSeed::SharedCtor() {
  seed_ = GOOGLE_ULONGLONG(0);
}

SessionSeed::~SessionSeed() {
  // @@protoc_insertion_point(destructor:proto.SessionSeed)
  SharedDtor();
}

void SessionSeed::SharedDtor() {
}

void SessionSeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SessionSeed::descriptor() {
  ::protobuf_proto_2fclient_5fgate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fclient_5fgate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionSeed& SessionSeed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fclient_5fgate_2eproto::scc_info_SessionSeed.base);
  return *internal_default_instance();
}


void SessionSeed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SessionSeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seed_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SessionSeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SessionSeed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 seed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SessionSeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SessionSeed)
  return false;
#undef DO_
}

void SessionSeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SessionSeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seed = 1;
  if (this->seed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->seed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SessionSeed)
}

::google::protobuf::uint8* SessionSeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SessionSeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seed = 1;
  if (this->seed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->seed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SessionSeed)
  return target;
}

size_t SessionSeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SessionSeed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 seed = 1;
  if (this->seed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionSeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SessionSeed)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionSeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionSeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SessionSeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SessionSeed)
    MergeFrom(*source);
  }
}

void SessionSeed::MergeFrom(const SessionSeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SessionSeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seed() != 0) {
    set_seed(from.seed());
  }
}

void SessionSeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SessionSeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionSeed::CopyFrom(const SessionSeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SessionSeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionSeed::IsInitialized() const {
  return true;
}

void SessionSeed::Swap(SessionSeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionSeed::InternalSwap(SessionSeed* other) {
  using std::swap;
  swap(seed_, other->seed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SessionSeed::GetMetadata() const {
  protobuf_proto_2fclient_5fgate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fclient_5fgate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EncryptKeyStr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncryptKeyStr::kEncryptKeyStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncryptKeyStr::EncryptKeyStr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fclient_5fgate_2eproto::scc_info_EncryptKeyStr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EncryptKeyStr)
}
EncryptKeyStr::EncryptKeyStr(const EncryptKeyStr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encrypt_key_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.encrypt_key_str().size() > 0) {
    encrypt_key_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypt_key_str_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.EncryptKeyStr)
}

void EncryptKeyStr::SharedCtor() {
  encrypt_key_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EncryptKeyStr::~EncryptKeyStr() {
  // @@protoc_insertion_point(destructor:proto.EncryptKeyStr)
  SharedDtor();
}

void EncryptKeyStr::SharedDtor() {
  encrypt_key_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncryptKeyStr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EncryptKeyStr::descriptor() {
  ::protobuf_proto_2fclient_5fgate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fclient_5fgate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EncryptKeyStr& EncryptKeyStr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fclient_5fgate_2eproto::scc_info_EncryptKeyStr.base);
  return *internal_default_instance();
}


void EncryptKeyStr::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EncryptKeyStr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encrypt_key_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EncryptKeyStr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EncryptKeyStr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes encrypt_key_str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypt_key_str()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EncryptKeyStr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EncryptKeyStr)
  return false;
#undef DO_
}

void EncryptKeyStr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EncryptKeyStr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encrypt_key_str = 1;
  if (this->encrypt_key_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->encrypt_key_str(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EncryptKeyStr)
}

::google::protobuf::uint8* EncryptKeyStr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EncryptKeyStr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encrypt_key_str = 1;
  if (this->encrypt_key_str().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encrypt_key_str(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EncryptKeyStr)
  return target;
}

size_t EncryptKeyStr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EncryptKeyStr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes encrypt_key_str = 1;
  if (this->encrypt_key_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encrypt_key_str());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptKeyStr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EncryptKeyStr)
  GOOGLE_DCHECK_NE(&from, this);
  const EncryptKeyStr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncryptKeyStr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EncryptKeyStr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EncryptKeyStr)
    MergeFrom(*source);
  }
}

void EncryptKeyStr::MergeFrom(const EncryptKeyStr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EncryptKeyStr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encrypt_key_str().size() > 0) {

    encrypt_key_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypt_key_str_);
  }
}

void EncryptKeyStr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EncryptKeyStr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptKeyStr::CopyFrom(const EncryptKeyStr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EncryptKeyStr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptKeyStr::IsInitialized() const {
  return true;
}

void EncryptKeyStr::Swap(EncryptKeyStr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncryptKeyStr::InternalSwap(EncryptKeyStr* other) {
  using std::swap;
  encrypt_key_str_.Swap(&other->encrypt_key_str_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EncryptKeyStr::GetMetadata() const {
  protobuf_proto_2fclient_5fgate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fclient_5fgate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EncryptKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncryptKey::kRandomHeaderFieldNumber;
const int EncryptKey::kEncryptKeyFieldNumber;
const int EncryptKey::kSeedFieldNumber;
const int EncryptKey::kRandomTailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncryptKey::EncryptKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fclient_5fgate_2eproto::scc_info_EncryptKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EncryptKey)
}
EncryptKey::EncryptKey(const EncryptKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  random_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.random_header().size() > 0) {
    random_header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_header_);
  }
  encrypt_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.encrypt_key().size() > 0) {
    encrypt_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypt_key_);
  }
  random_tail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.random_tail().size() > 0) {
    random_tail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_tail_);
  }
  seed_ = from.seed_;
  // @@protoc_insertion_point(copy_constructor:proto.EncryptKey)
}

void EncryptKey::SharedCtor() {
  random_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_tail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seed_ = GOOGLE_ULONGLONG(0);
}

EncryptKey::~EncryptKey() {
  // @@protoc_insertion_point(destructor:proto.EncryptKey)
  SharedDtor();
}

void EncryptKey::SharedDtor() {
  random_header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_tail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncryptKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EncryptKey::descriptor() {
  ::protobuf_proto_2fclient_5fgate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fclient_5fgate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EncryptKey& EncryptKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fclient_5fgate_2eproto::scc_info_EncryptKey.base);
  return *internal_default_instance();
}


void EncryptKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EncryptKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  random_header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_tail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seed_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool EncryptKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EncryptKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes random_header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes encrypt_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypt_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 seed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes random_tail = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_tail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EncryptKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EncryptKey)
  return false;
#undef DO_
}

void EncryptKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EncryptKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes random_header = 1;
  if (this->random_header().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->random_header(), output);
  }

  // bytes encrypt_key = 2;
  if (this->encrypt_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->encrypt_key(), output);
  }

  // uint64 seed = 3;
  if (this->seed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->seed(), output);
  }

  // bytes random_tail = 4;
  if (this->random_tail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->random_tail(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EncryptKey)
}

::google::protobuf::uint8* EncryptKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EncryptKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes random_header = 1;
  if (this->random_header().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->random_header(), target);
  }

  // bytes encrypt_key = 2;
  if (this->encrypt_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encrypt_key(), target);
  }

  // uint64 seed = 3;
  if (this->seed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->seed(), target);
  }

  // bytes random_tail = 4;
  if (this->random_tail().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->random_tail(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EncryptKey)
  return target;
}

size_t EncryptKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EncryptKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes random_header = 1;
  if (this->random_header().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_header());
  }

  // bytes encrypt_key = 2;
  if (this->encrypt_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encrypt_key());
  }

  // bytes random_tail = 4;
  if (this->random_tail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_tail());
  }

  // uint64 seed = 3;
  if (this->seed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EncryptKey)
  GOOGLE_DCHECK_NE(&from, this);
  const EncryptKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncryptKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EncryptKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EncryptKey)
    MergeFrom(*source);
  }
}

void EncryptKey::MergeFrom(const EncryptKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EncryptKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.random_header().size() > 0) {

    random_header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_header_);
  }
  if (from.encrypt_key().size() > 0) {

    encrypt_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypt_key_);
  }
  if (from.random_tail().size() > 0) {

    random_tail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_tail_);
  }
  if (from.seed() != 0) {
    set_seed(from.seed());
  }
}

void EncryptKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EncryptKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptKey::CopyFrom(const EncryptKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EncryptKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptKey::IsInitialized() const {
  return true;
}

void EncryptKey::Swap(EncryptKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncryptKey::InternalSwap(EncryptKey* other) {
  using std::swap;
  random_header_.Swap(&other->random_header_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypt_key_.Swap(&other->encrypt_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  random_tail_.Swap(&other->random_tail_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(seed_, other->seed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EncryptKey::GetMetadata() const {
  protobuf_proto_2fclient_5fgate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fclient_5fgate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

IGateService::~IGateService() {}

const ::google::protobuf::ServiceDescriptor* IGateService::descriptor() {
  protobuf_proto_2fclient_5fgate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fclient_5fgate_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* IGateService::GetDescriptor() {
  return descriptor();
}

void IGateService::sesionSeedRequest(::google::protobuf::RpcController* controller,
                         const ::proto::None*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method sesionSeedRequest() not implemented.");
  done->Run();
}

void IGateService::encryptKeyRequest(::google::protobuf::RpcController* controller,
                         const ::proto::EncryptKeyStr*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method encryptKeyRequest() not implemented.");
  done->Run();
}

void IGateService::loginRequest(::google::protobuf::RpcController* controller,
                         const ::proto::LoginRequest*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method loginRequest() not implemented.");
  done->Run();
}

void IGateService::callEntityRpc(::google::protobuf::RpcController* controller,
                         const ::proto::RpcMessage*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method callEntityRpc() not implemented.");
  done->Run();
}

void IGateService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_proto_2fclient_5fgate_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      sesionSeedRequest(controller,
             ::google::protobuf::down_cast<const ::proto::None*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    case 1:
      encryptKeyRequest(controller,
             ::google::protobuf::down_cast<const ::proto::EncryptKeyStr*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    case 2:
      loginRequest(controller,
             ::google::protobuf::down_cast<const ::proto::LoginRequest*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    case 3:
      callEntityRpc(controller,
             ::google::protobuf::down_cast<const ::proto::RpcMessage*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& IGateService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::None::default_instance();
    case 1:
      return ::proto::EncryptKeyStr::default_instance();
    case 2:
      return ::proto::LoginRequest::default_instance();
    case 3:
      return ::proto::RpcMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& IGateService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::None::default_instance();
    case 1:
      return ::proto::None::default_instance();
    case 2:
      return ::proto::None::default_instance();
    case 3:
      return ::proto::None::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

IGateService_Stub::IGateService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
IGateService_Stub::IGateService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
IGateService_Stub::~IGateService_Stub() {
  if (owns_channel_) delete channel_;
}

void IGateService_Stub::sesionSeedRequest(::google::protobuf::RpcController* controller,
                              const ::proto::None* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void IGateService_Stub::encryptKeyRequest(::google::protobuf::RpcController* controller,
                              const ::proto::EncryptKeyStr* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void IGateService_Stub::loginRequest(::google::protobuf::RpcController* controller,
                              const ::proto::LoginRequest* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void IGateService_Stub::callEntityRpc(::google::protobuf::RpcController* controller,
                              const ::proto::RpcMessage* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

IClientService::~IClientService() {}

const ::google::protobuf::ServiceDescriptor* IClientService::descriptor() {
  protobuf_proto_2fclient_5fgate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fclient_5fgate_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* IClientService::GetDescriptor() {
  return descriptor();
}

void IClientService::sessionSeedReply(::google::protobuf::RpcController* controller,
                         const ::proto::None*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method sessionSeedReply() not implemented.");
  done->Run();
}

void IClientService::encryptKeyReply(::google::protobuf::RpcController* controller,
                         const ::proto::None*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method encryptKeyReply() not implemented.");
  done->Run();
}

void IClientService::loginReply(::google::protobuf::RpcController* controller,
                         const ::proto::LoginReply*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method loginReply() not implemented.");
  done->Run();
}

void IClientService::callEntityRpc(::google::protobuf::RpcController* controller,
                         const ::proto::RpcMessage*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method callEntityRpc() not implemented.");
  done->Run();
}

void IClientService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_proto_2fclient_5fgate_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      sessionSeedReply(controller,
             ::google::protobuf::down_cast<const ::proto::None*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    case 1:
      encryptKeyReply(controller,
             ::google::protobuf::down_cast<const ::proto::None*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    case 2:
      loginReply(controller,
             ::google::protobuf::down_cast<const ::proto::LoginReply*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    case 3:
      callEntityRpc(controller,
             ::google::protobuf::down_cast<const ::proto::RpcMessage*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& IClientService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::None::default_instance();
    case 1:
      return ::proto::None::default_instance();
    case 2:
      return ::proto::LoginReply::default_instance();
    case 3:
      return ::proto::RpcMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& IClientService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::None::default_instance();
    case 1:
      return ::proto::None::default_instance();
    case 2:
      return ::proto::None::default_instance();
    case 3:
      return ::proto::None::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

IClientService_Stub::IClientService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
IClientService_Stub::IClientService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
IClientService_Stub::~IClientService_Stub() {
  if (owns_channel_) delete channel_;
}

void IClientService_Stub::sessionSeedReply(::google::protobuf::RpcController* controller,
                              const ::proto::None* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void IClientService_Stub::encryptKeyReply(::google::protobuf::RpcController* controller,
                              const ::proto::None* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void IClientService_Stub::loginReply(::google::protobuf::RpcController* controller,
                              const ::proto::LoginReply* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void IClientService_Stub::callEntityRpc(::google::protobuf::RpcController* controller,
                              const ::proto::RpcMessage* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::SessionSeed* Arena::CreateMaybeMessage< ::proto::SessionSeed >(Arena* arena) {
  return Arena::CreateInternal< ::proto::SessionSeed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::EncryptKeyStr* Arena::CreateMaybeMessage< ::proto::EncryptKeyStr >(Arena* arena) {
  return Arena::CreateInternal< ::proto::EncryptKeyStr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::EncryptKey* Arena::CreateMaybeMessage< ::proto::EncryptKey >(Arena* arena) {
  return Arena::CreateInternal< ::proto::EncryptKey >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
