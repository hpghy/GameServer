// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/gate_game.proto

#include "proto/gate_game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace proto {
}  // namespace proto
namespace protobuf_proto_2fgate_5fgame_2eproto {
void InitDefaults() {
}

const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/gate_game.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025proto/gate_game.proto\022\005proto\032\022proto/co"
      "mmon.proto2q\n\014IGameService\0220\n\014loginReque"
      "st\022\023.proto.LoginRequest\032\013.proto.None\022/\n\r"
      "callEntityRpc\022\021.proto.RpcMessage\032\013.proto"
      ".None2s\n\022IGameClientService\022,\n\nloginRepl"
      "y\022\021.proto.LoginReply\032\013.proto.None\022/\n\rcal"
      "lEntityRpc\022\021.proto.RpcMessage\032\013.proto.No"
      "neB\006\200\001\001\220\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 298);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/gate_game.proto", &protobuf_RegisterTypes);
  ::protobuf_proto_2fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fgate_5fgame_2eproto
namespace proto {

// ===================================================================

IGameService::~IGameService() {}

const ::google::protobuf::ServiceDescriptor* IGameService::descriptor() {
  protobuf_proto_2fgate_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fgate_5fgame_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* IGameService::GetDescriptor() {
  return descriptor();
}

void IGameService::loginRequest(::google::protobuf::RpcController* controller,
                         const ::proto::LoginRequest*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method loginRequest() not implemented.");
  done->Run();
}

void IGameService::callEntityRpc(::google::protobuf::RpcController* controller,
                         const ::proto::RpcMessage*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method callEntityRpc() not implemented.");
  done->Run();
}

void IGameService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_proto_2fgate_5fgame_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      loginRequest(controller,
             ::google::protobuf::down_cast<const ::proto::LoginRequest*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    case 1:
      callEntityRpc(controller,
             ::google::protobuf::down_cast<const ::proto::RpcMessage*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& IGameService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::LoginRequest::default_instance();
    case 1:
      return ::proto::RpcMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& IGameService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::None::default_instance();
    case 1:
      return ::proto::None::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

IGameService_Stub::IGameService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
IGameService_Stub::IGameService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
IGameService_Stub::~IGameService_Stub() {
  if (owns_channel_) delete channel_;
}

void IGameService_Stub::loginRequest(::google::protobuf::RpcController* controller,
                              const ::proto::LoginRequest* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void IGameService_Stub::callEntityRpc(::google::protobuf::RpcController* controller,
                              const ::proto::RpcMessage* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

IGameClientService::~IGameClientService() {}

const ::google::protobuf::ServiceDescriptor* IGameClientService::descriptor() {
  protobuf_proto_2fgate_5fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fgate_5fgame_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* IGameClientService::GetDescriptor() {
  return descriptor();
}

void IGameClientService::loginReply(::google::protobuf::RpcController* controller,
                         const ::proto::LoginReply*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method loginReply() not implemented.");
  done->Run();
}

void IGameClientService::callEntityRpc(::google::protobuf::RpcController* controller,
                         const ::proto::RpcMessage*,
                         ::proto::None*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method callEntityRpc() not implemented.");
  done->Run();
}

void IGameClientService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_proto_2fgate_5fgame_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      loginReply(controller,
             ::google::protobuf::down_cast<const ::proto::LoginReply*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    case 1:
      callEntityRpc(controller,
             ::google::protobuf::down_cast<const ::proto::RpcMessage*>(request),
             ::google::protobuf::down_cast< ::proto::None*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& IGameClientService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::LoginReply::default_instance();
    case 1:
      return ::proto::RpcMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& IGameClientService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::None::default_instance();
    case 1:
      return ::proto::None::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

IGameClientService_Stub::IGameClientService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
IGameClientService_Stub::IGameClientService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
IGameClientService_Stub::~IGameClientService_Stub() {
  if (owns_channel_) delete channel_;
}

void IGameClientService_Stub::loginReply(::google::protobuf::RpcController* controller,
                              const ::proto::LoginReply* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void IGameClientService_Stub::callEntityRpc(::google::protobuf::RpcController* controller,
                              const ::proto::RpcMessage* request,
                              ::proto::None* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
