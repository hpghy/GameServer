// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/common.proto

#ifndef PROTOBUF_INCLUDED_proto_2fcommon_2eproto
#define PROTOBUF_INCLUDED_proto_2fcommon_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fcommon_2eproto 

namespace protobuf_proto_2fcommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fcommon_2eproto
namespace proto {
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class LoginReply;
class LoginReplyDefaultTypeInternal;
extern LoginReplyDefaultTypeInternal _LoginReply_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class None;
class NoneDefaultTypeInternal;
extern NoneDefaultTypeInternal _None_default_instance_;
class RpcMessage;
class RpcMessageDefaultTypeInternal;
extern RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::DeviceInfo* Arena::CreateMaybeMessage<::proto::DeviceInfo>(Arena*);
template<> ::proto::LoginReply* Arena::CreateMaybeMessage<::proto::LoginReply>(Arena*);
template<> ::proto::LoginRequest* Arena::CreateMaybeMessage<::proto::LoginRequest>(Arena*);
template<> ::proto::None* Arena::CreateMaybeMessage<::proto::None>(Arena*);
template<> ::proto::RpcMessage* Arena::CreateMaybeMessage<::proto::RpcMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

// ===================================================================

class None : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.None) */ {
 public:
  None();
  virtual ~None();

  None(const None& from);

  inline None& operator=(const None& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  None(None&& from) noexcept
    : None() {
    *this = ::std::move(from);
  }

  inline None& operator=(None&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const None& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const None* internal_default_instance() {
    return reinterpret_cast<const None*>(
               &_None_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(None* other);
  friend void swap(None& a, None& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline None* New() const final {
    return CreateMaybeMessage<None>(NULL);
  }

  None* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<None>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const None& from);
  void MergeFrom(const None& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(None* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.None)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DeviceInfo* other);
  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(NULL);
  }

  DeviceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // bytes deviceid = 2;
  void clear_deviceid();
  static const int kDeviceidFieldNumber = 2;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const void* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // uint32 sessionid = 3;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 3;
  ::google::protobuf::uint32 sessionid() const;
  void set_sessionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::uint32 sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoginRequest* other);
  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(NULL);
  }

  LoginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.DeviceInfo device_info = 1;
  bool has_device_info() const;
  void clear_device_info();
  static const int kDeviceInfoFieldNumber = 1;
  private:
  const ::proto::DeviceInfo& _internal_device_info() const;
  public:
  const ::proto::DeviceInfo& device_info() const;
  ::proto::DeviceInfo* release_device_info();
  ::proto::DeviceInfo* mutable_device_info();
  void set_allocated_device_info(::proto::DeviceInfo* device_info);

  // uint32 login_type = 2;
  void clear_login_type();
  static const int kLoginTypeFieldNumber = 2;
  ::google::protobuf::uint32 login_type() const;
  void set_login_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.LoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::DeviceInfo* device_info_;
  ::google::protobuf::uint32 login_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.LoginReply) */ {
 public:
  LoginReply();
  virtual ~LoginReply();

  LoginReply(const LoginReply& from);

  inline LoginReply& operator=(const LoginReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginReply(LoginReply&& from) noexcept
    : LoginReply() {
    *this = ::std::move(from);
  }

  inline LoginReply& operator=(LoginReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReply* internal_default_instance() {
    return reinterpret_cast<const LoginReply*>(
               &_LoginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LoginReply* other);
  friend void swap(LoginReply& a, LoginReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginReply* New() const final {
    return CreateMaybeMessage<LoginReply>(NULL);
  }

  LoginReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginReply& from);
  void MergeFrom(const LoginReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes player_data = 3;
  void clear_player_data();
  static const int kPlayerDataFieldNumber = 3;
  const ::std::string& player_data() const;
  void set_player_data(const ::std::string& value);
  #if LANG_CXX11
  void set_player_data(::std::string&& value);
  #endif
  void set_player_data(const char* value);
  void set_player_data(const void* value, size_t size);
  ::std::string* mutable_player_data();
  ::std::string* release_player_data();
  void set_allocated_player_data(::std::string* player_data);

  // .proto.DeviceInfo device_info = 1;
  bool has_device_info() const;
  void clear_device_info();
  static const int kDeviceInfoFieldNumber = 1;
  private:
  const ::proto::DeviceInfo& _internal_device_info() const;
  public:
  const ::proto::DeviceInfo& device_info() const;
  ::proto::DeviceInfo* release_device_info();
  ::proto::DeviceInfo* mutable_device_info();
  void set_allocated_device_info(::proto::DeviceInfo* device_info);

  // uint32 retcode = 2;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  ::google::protobuf::uint32 retcode() const;
  void set_retcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.LoginReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr player_data_;
  ::proto::DeviceInfo* device_info_;
  ::google::protobuf::uint32 retcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RpcMessage) */ {
 public:
  RpcMessage();
  virtual ~RpcMessage();

  RpcMessage(const RpcMessage& from);

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcMessage(RpcMessage&& from) noexcept
    : RpcMessage() {
    *this = ::std::move(from);
  }

  inline RpcMessage& operator=(RpcMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcMessage* internal_default_instance() {
    return reinterpret_cast<const RpcMessage*>(
               &_RpcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RpcMessage* other);
  friend void swap(RpcMessage& a, RpcMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcMessage* New() const final {
    return CreateMaybeMessage<RpcMessage>(NULL);
  }

  RpcMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string method = 2;
  void clear_method();
  static const int kMethodFieldNumber = 2;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // bytes params = 4;
  void clear_params();
  static const int kParamsFieldNumber = 4;
  const ::std::string& params() const;
  void set_params(const ::std::string& value);
  #if LANG_CXX11
  void set_params(::std::string&& value);
  #endif
  void set_params(const char* value);
  void set_params(const void* value, size_t size);
  ::std::string* mutable_params();
  ::std::string* release_params();
  void set_allocated_params(::std::string* params);

  // .proto.DeviceInfo device_info = 1;
  bool has_device_info() const;
  void clear_device_info();
  static const int kDeviceInfoFieldNumber = 1;
  private:
  const ::proto::DeviceInfo& _internal_device_info() const;
  public:
  const ::proto::DeviceInfo& device_info() const;
  ::proto::DeviceInfo* release_device_info();
  ::proto::DeviceInfo* mutable_device_info();
  void set_allocated_device_info(::proto::DeviceInfo* device_info);

  // uint32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.RpcMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr params_;
  ::proto::DeviceInfo* device_info_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fcommon_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// None

// -------------------------------------------------------------------

// DeviceInfo

// string addr = 1;
inline void DeviceInfo::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::addr() const {
  // @@protoc_insertion_point(field_get:proto.DeviceInfo.addr)
  return addr_.GetNoArena();
}
inline void DeviceInfo::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DeviceInfo.addr)
}
#if LANG_CXX11
inline void DeviceInfo::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DeviceInfo.addr)
}
#endif
inline void DeviceInfo::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DeviceInfo.addr)
}
inline void DeviceInfo::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DeviceInfo.addr)
}
inline ::std::string* DeviceInfo::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:proto.DeviceInfo.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_addr() {
  // @@protoc_insertion_point(field_release:proto.DeviceInfo.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:proto.DeviceInfo.addr)
}

// bytes deviceid = 2;
inline void DeviceInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:proto.DeviceInfo.deviceid)
  return deviceid_.GetNoArena();
}
inline void DeviceInfo::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DeviceInfo.deviceid)
}
#if LANG_CXX11
inline void DeviceInfo::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DeviceInfo.deviceid)
}
#endif
inline void DeviceInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DeviceInfo.deviceid)
}
inline void DeviceInfo::set_deviceid(const void* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DeviceInfo.deviceid)
}
inline ::std::string* DeviceInfo::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:proto.DeviceInfo.deviceid)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:proto.DeviceInfo.deviceid)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:proto.DeviceInfo.deviceid)
}

// uint32 sessionid = 3;
inline void DeviceInfo::clear_sessionid() {
  sessionid_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:proto.DeviceInfo.sessionid)
  return sessionid_;
}
inline void DeviceInfo::set_sessionid(::google::protobuf::uint32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:proto.DeviceInfo.sessionid)
}

// -------------------------------------------------------------------

// LoginRequest

// .proto.DeviceInfo device_info = 1;
inline bool LoginRequest::has_device_info() const {
  return this != internal_default_instance() && device_info_ != NULL;
}
inline void LoginRequest::clear_device_info() {
  if (GetArenaNoVirtual() == NULL && device_info_ != NULL) {
    delete device_info_;
  }
  device_info_ = NULL;
}
inline const ::proto::DeviceInfo& LoginRequest::_internal_device_info() const {
  return *device_info_;
}
inline const ::proto::DeviceInfo& LoginRequest::device_info() const {
  const ::proto::DeviceInfo* p = device_info_;
  // @@protoc_insertion_point(field_get:proto.LoginRequest.device_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::DeviceInfo*>(
      &::proto::_DeviceInfo_default_instance_);
}
inline ::proto::DeviceInfo* LoginRequest::release_device_info() {
  // @@protoc_insertion_point(field_release:proto.LoginRequest.device_info)
  
  ::proto::DeviceInfo* temp = device_info_;
  device_info_ = NULL;
  return temp;
}
inline ::proto::DeviceInfo* LoginRequest::mutable_device_info() {
  
  if (device_info_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::DeviceInfo>(GetArenaNoVirtual());
    device_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.LoginRequest.device_info)
  return device_info_;
}
inline void LoginRequest::set_allocated_device_info(::proto::DeviceInfo* device_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_info_;
  }
  if (device_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    
  } else {
    
  }
  device_info_ = device_info;
  // @@protoc_insertion_point(field_set_allocated:proto.LoginRequest.device_info)
}

// uint32 login_type = 2;
inline void LoginRequest::clear_login_type() {
  login_type_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequest::login_type() const {
  // @@protoc_insertion_point(field_get:proto.LoginRequest.login_type)
  return login_type_;
}
inline void LoginRequest::set_login_type(::google::protobuf::uint32 value) {
  
  login_type_ = value;
  // @@protoc_insertion_point(field_set:proto.LoginRequest.login_type)
}

// -------------------------------------------------------------------

// LoginReply

// .proto.DeviceInfo device_info = 1;
inline bool LoginReply::has_device_info() const {
  return this != internal_default_instance() && device_info_ != NULL;
}
inline void LoginReply::clear_device_info() {
  if (GetArenaNoVirtual() == NULL && device_info_ != NULL) {
    delete device_info_;
  }
  device_info_ = NULL;
}
inline const ::proto::DeviceInfo& LoginReply::_internal_device_info() const {
  return *device_info_;
}
inline const ::proto::DeviceInfo& LoginReply::device_info() const {
  const ::proto::DeviceInfo* p = device_info_;
  // @@protoc_insertion_point(field_get:proto.LoginReply.device_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::DeviceInfo*>(
      &::proto::_DeviceInfo_default_instance_);
}
inline ::proto::DeviceInfo* LoginReply::release_device_info() {
  // @@protoc_insertion_point(field_release:proto.LoginReply.device_info)
  
  ::proto::DeviceInfo* temp = device_info_;
  device_info_ = NULL;
  return temp;
}
inline ::proto::DeviceInfo* LoginReply::mutable_device_info() {
  
  if (device_info_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::DeviceInfo>(GetArenaNoVirtual());
    device_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.LoginReply.device_info)
  return device_info_;
}
inline void LoginReply::set_allocated_device_info(::proto::DeviceInfo* device_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_info_;
  }
  if (device_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    
  } else {
    
  }
  device_info_ = device_info;
  // @@protoc_insertion_point(field_set_allocated:proto.LoginReply.device_info)
}

// uint32 retcode = 2;
inline void LoginReply::clear_retcode() {
  retcode_ = 0u;
}
inline ::google::protobuf::uint32 LoginReply::retcode() const {
  // @@protoc_insertion_point(field_get:proto.LoginReply.retcode)
  return retcode_;
}
inline void LoginReply::set_retcode(::google::protobuf::uint32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.LoginReply.retcode)
}

// bytes player_data = 3;
inline void LoginReply::clear_player_data() {
  player_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginReply::player_data() const {
  // @@protoc_insertion_point(field_get:proto.LoginReply.player_data)
  return player_data_.GetNoArena();
}
inline void LoginReply::set_player_data(const ::std::string& value) {
  
  player_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.LoginReply.player_data)
}
#if LANG_CXX11
inline void LoginReply::set_player_data(::std::string&& value) {
  
  player_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.LoginReply.player_data)
}
#endif
inline void LoginReply::set_player_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  player_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.LoginReply.player_data)
}
inline void LoginReply::set_player_data(const void* value, size_t size) {
  
  player_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.LoginReply.player_data)
}
inline ::std::string* LoginReply::mutable_player_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.LoginReply.player_data)
  return player_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginReply::release_player_data() {
  // @@protoc_insertion_point(field_release:proto.LoginReply.player_data)
  
  return player_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_player_data(::std::string* player_data) {
  if (player_data != NULL) {
    
  } else {
    
  }
  player_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_data);
  // @@protoc_insertion_point(field_set_allocated:proto.LoginReply.player_data)
}

// -------------------------------------------------------------------

// RpcMessage

// .proto.DeviceInfo device_info = 1;
inline bool RpcMessage::has_device_info() const {
  return this != internal_default_instance() && device_info_ != NULL;
}
inline void RpcMessage::clear_device_info() {
  if (GetArenaNoVirtual() == NULL && device_info_ != NULL) {
    delete device_info_;
  }
  device_info_ = NULL;
}
inline const ::proto::DeviceInfo& RpcMessage::_internal_device_info() const {
  return *device_info_;
}
inline const ::proto::DeviceInfo& RpcMessage::device_info() const {
  const ::proto::DeviceInfo* p = device_info_;
  // @@protoc_insertion_point(field_get:proto.RpcMessage.device_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::DeviceInfo*>(
      &::proto::_DeviceInfo_default_instance_);
}
inline ::proto::DeviceInfo* RpcMessage::release_device_info() {
  // @@protoc_insertion_point(field_release:proto.RpcMessage.device_info)
  
  ::proto::DeviceInfo* temp = device_info_;
  device_info_ = NULL;
  return temp;
}
inline ::proto::DeviceInfo* RpcMessage::mutable_device_info() {
  
  if (device_info_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::DeviceInfo>(GetArenaNoVirtual());
    device_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.RpcMessage.device_info)
  return device_info_;
}
inline void RpcMessage::set_allocated_device_info(::proto::DeviceInfo* device_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_info_;
  }
  if (device_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    
  } else {
    
  }
  device_info_ = device_info;
  // @@protoc_insertion_point(field_set_allocated:proto.RpcMessage.device_info)
}

// string method = 2;
inline void RpcMessage::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcMessage::method() const {
  // @@protoc_insertion_point(field_get:proto.RpcMessage.method)
  return method_.GetNoArena();
}
inline void RpcMessage::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RpcMessage.method)
}
#if LANG_CXX11
inline void RpcMessage::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RpcMessage.method)
}
#endif
inline void RpcMessage::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RpcMessage.method)
}
inline void RpcMessage::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RpcMessage.method)
}
inline ::std::string* RpcMessage::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:proto.RpcMessage.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcMessage::release_method() {
  // @@protoc_insertion_point(field_release:proto.RpcMessage.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcMessage::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:proto.RpcMessage.method)
}

// uint32 id = 3;
inline void RpcMessage::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RpcMessage::id() const {
  // @@protoc_insertion_point(field_get:proto.RpcMessage.id)
  return id_;
}
inline void RpcMessage::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.RpcMessage.id)
}

// bytes params = 4;
inline void RpcMessage::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcMessage::params() const {
  // @@protoc_insertion_point(field_get:proto.RpcMessage.params)
  return params_.GetNoArena();
}
inline void RpcMessage::set_params(const ::std::string& value) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RpcMessage.params)
}
#if LANG_CXX11
inline void RpcMessage::set_params(::std::string&& value) {
  
  params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RpcMessage.params)
}
#endif
inline void RpcMessage::set_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RpcMessage.params)
}
inline void RpcMessage::set_params(const void* value, size_t size) {
  
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RpcMessage.params)
}
inline ::std::string* RpcMessage::mutable_params() {
  
  // @@protoc_insertion_point(field_mutable:proto.RpcMessage.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcMessage::release_params() {
  // @@protoc_insertion_point(field_release:proto.RpcMessage.params)
  
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcMessage::set_allocated_params(::std::string* params) {
  if (params != NULL) {
    
  } else {
    
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:proto.RpcMessage.params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fcommon_2eproto
